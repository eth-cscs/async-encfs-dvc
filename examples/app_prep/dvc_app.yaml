# app_prep version 1 description for DVC stage generation

app:
  name: &app_name app_prep_v1
  code_root: &code_root "\\$(git rev-parse --show-toplevel)/examples/app_prep"

  # examples for manual and automated ETL stages
  # (the assignment of manual to train, auto to test/inf/sim is chosen arbitrarily)
  stages:
    # preprocessing step run manually outside of DVC
    # (frozen DVC stage, when completed update output with 'dvc commit <stage-name>)
    manual_train:
      type: etl_stage
      script: "true"  # script is never run (commandline params are not checked, but should reflect manual processing)
      frozen: True  # specific to manual stage: protects outputs from being deleted/overwritten by dvc repro
      name: &stage_name manual
      input_data: # parameterizes stage
        name: &input_etl_data ml_dataset_v1/training

    auto_test:  # an automated (standard) DVC stage
      type: etl_stage
      script: [*code_root, prep.sh]  # the automated ETL step
      frozen: False
      name: &stage_name auto
      input_data:
        name: &input_etl_data ml_dataset_v1/test

    auto_inf:
      type: etl_stage
      script: [*code_root, prep.sh]
      frozen: False
      name: &stage_name auto
      input_data:
        name: &input_etl_data ml_dataset_v1/inference

    sim:
      type: etl_stage
      script: [*code_root, prep.sh]
      frozen: False
      name: &stage_name auto
      input_data:
        name: &input_etl_data sim_dataset_v1

# include dvc-root/mounts and stage type information (paths relative to DVC root)
include:
  dvc_root: ".dvc_policies/repo/dvc_root.yaml"
  etl_stage: ".dvc_policies/stages/dvc_etl.yaml"
