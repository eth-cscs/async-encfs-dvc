# app_sim version 1 description for DVC stage generation

app:
  name: &app_name app_sim_v1/sim_dataset_v1  # apps should always be versioned
  # container_engine can be none, docker or sarus (container_data only takes effect for the latter two)
  container_engine: sarus
#  container_opts:
#    --mpi:  # required when using MPI inside Sarus containers
  image: load/async-encfs-dvc/app_sim  # container image to use (only takes effect if container_engine != none)
  # absolute path or "\\$(git rev-parse --show-toplevel)/..." with container_engine == none
  code_root: &code_root /src/app

  stages: # app-specific stages
    base_simulation:
      type: simulation_stage # refers to included stage definition
      input_simulation: # parameterizes stage
        name: &simulation_input_app_name in/sim_dataset_v1/app_prep_v1
        stage: &simulation_input_app_stage auto
      # use the following to run with MPI
#      mpi_exec: ...
#      mpi_opts:
#        ...
      # use the following to run with SLURM
      slurm_opts:
        # environment configuration in sbatch script before srun (only stage supported)
        # e.g. on Piz Daint load sarus module here
        stage_env: |
          module load sarus
        # sbatch options
        stage:
          --nodes: 8
          --ntasks: 16
          --cpus-per-task: 12
          --constraint: gpu
          --time: '00:05:00'
        dvc:
          --cpus-per-task: 24
          --constraint: mc
          --time: '12:00:00'
        all:
          --account: csstaff
      script: [*code_root, simulation.sh]
      # for script simulation.sh
      # (note that these options are not processed w.r.t. dvc_root_host)
      extra_command_line_options:
        --simulation-output-file-num-per-rank: "{{ simulation_output_file_num_per_rank }}"
        --simulation-output-file-size: "{{ simulation_output_file_size }}"

    simulation:
      type: simulation_stage # refers to included stage definition
      input_simulation: # parameterizes stage
        name: &simulation_input_app_name app_sim_v1/sim_dataset_v1
        stage: &simulation_input_app_stage simulation
      # use the following to run with MPI
#      mpi_exec: ...
#      mpi_opts:
#        ...
      # use the following to run with SLURM
      slurm_opts:
        # environment configuration in sbatch script before srun (only stage supported)
        # e.g. on Piz Daint load sarus module here
        stage_env: |
          module load sarus
        # sbatch options
        stage:
          --nodes: 8
          --ntasks: 16
          --cpus-per-task: 12
          --constraint: gpu
          --time: '00:05:00'
        dvc:
          --cpus-per-task: 24
          --constraint: mc
          --time: '12:00:00'
        all:
          --account: csstaff
      script: [*code_root, simulation.sh]
      # for script simulation.sh
      # (note that these options are not processed w.r.t. dvc_root_host)
      extra_command_line_options:
        --simulation-output-file-num-per-rank: "{{ simulation_output_file_num_per_rank }}"
        --simulation-output-file-size: "{{ simulation_output_file_size }}"


container_data:  # takes only effect if container_engine is not 'none'
  mount:  # absolute path in container (mount target for data - either plain or encfs)
    data: &mount_data_container /app-data  # can be combined with *mount_data_host or *dvc_root_host


# include dvc-root/mounts and stage type information
include:
  dvc_root: '.dvc_policies/repo/dvc_root.yaml'
  simulation_stage: '.dvc_policies/stages/dvc_simulation.yaml'
